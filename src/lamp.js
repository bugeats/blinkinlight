const BL_AUTHOR = 'Chadwick Dahlquist';
const BL_REPOSITORY_URL = 'https://github.com/bugeats/blinkinlight';

const BL_SPEED_MAGIC_NUMBER = 9;
const BL_FPS = 60;
const BL_PALLETE = {
    space: '#383784',
    stars: '#FFE2EC'
};

// -----------------------------------------------------------------------------

class Lamp extends React.Component { // eslint-disable-line no-undef
    constructor(props) {
        super(props);
        this.state = {
            accel: 0,
            angle: 90,
            lagX: 0,
            lagY: 0,
            posX: 0,
            posY: 0,
            turbulence: 0
        };

        setInterval(() => {
            requestAnimationFrame(() => {
                this.tick();
            });
        }, 1000 / BL_FPS);
    }

    // calculate a frame of the animation loop
    // state is updated each time
    tick() {
        const { state } = this;

        // turbulence swings the angle around
        const turbulence = state.turbulence + (0.01 * state.accel);
        const angle = 0 + (Math.sin(turbulence) * 33);

        // Acceleration of the Lander in space. Magic numbers here.
        const accel = this.props.lit
            ? bound(state.accel + 0.06, 0, 1)
            : bound(state.accel - 0.02, 0, 1);

        // calculate next coordinates by angle
        const nX = Math.sin(2 * Math.PI * (angle / 360));
        const nY = Math.cos(2 * Math.PI * (angle / 360));

        // angular velocity
        const posX = state.posX + (nX * accel * BL_SPEED_MAGIC_NUMBER);
        const posY = state.posY - (nY * accel * BL_SPEED_MAGIC_NUMBER);

        const lagX = slew(state.lagX, posX, 4);
        const lagY = slew(state.lagY, posY, 8);

        this.setState({
            accel,
            angle,
            lagX,
            lagY,
            posX,
            posY,
            turbulence
        });
    }

    render() {
        // Calculate 'camera lag' offsets.
        const offX = this.state.lagX - this.state.posX;
        const offY = this.state.lagY - this.state.posY;
        const primaryColor = this.props.color; // provided by app container

        return (
          <LampContainer containerHeight={ 420 } containerWidth={ 420 }>
            <LampScene>
              <StarField depthFactor={ (3/4) } posX={ this.state.posX - offX } posY={ this.state.posY - offY }/>
              <StarField depthFactor={ (2/4) } posX={ this.state.posX - offX } posY={ this.state.posY - offY }/>
              <StarField depthFactor={ (1/4) } posX={ this.state.posX - offX } posY={ this.state.posY - offY }/>
              <Lander lit={ this.props.lit }
                      primaryColor={ primaryColor }
                      offsetX={ offX }
                      offsetY={ offY }
                      accel={ this.state.accel }
                      angle={ this.state.angle }
                      width={ 220 } height={ 220 }/>
            </LampScene>
            <LampAttribution/>
          </LampContainer>
        );
    }
}

// -----------------------------------------------------------------------------

// Provides the positioned container to hang everythign off of.
const LampContainer = ({
    children,
    containerHeight,
    containerWidth
}) => {
    const style = {
        position: 'relative',
        margin: '40px auto',
        height: `${ containerHeight }px`,
        width: `${ containerWidth }px`
    };
    return (
      <div className='lamp-container' style={style}>{ children }</div>
    );
};

// The animated outer space scene.
const LampScene = ({
    children
}) => {
    const style = {
        position: 'absolute',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        borderRadius: '100%',
        overflow: 'hidden',
        backgroundColor: `${ BL_PALLETE.space }`
    };
    return (
      <div className='lamp-scene' style={style}>{ children }</div>
    );
};

// Attribution text below the scene.
const LampAttribution = () => {
    const textStyle = {
        fontFamily: 'sans-serif',
        fontSize: '14px',
        color: '#CCCCCC'
    };
    const style = {
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: '-30px',
        textAlign: 'center'
    };
    return (
      <div className='lamp-attribution' style={ Object.assign(style, textStyle) }>
        Tribute by { BL_AUTHOR } (<a style={ textStyle } href={ BL_REPOSITORY_URL } rel='noopener noreferrer' target='_blank'>see source</a>).
      </div>
    );
};

// Lander Sprite ---------------------------------------------------------------

const Lander = ({
    accel,
    angle,
    height,
    lit,
    offsetX,
    offsetY,
    primaryColor,
    width
}) => {
    const style = {
        position: 'absolute',
        top: '50%',
        left: '50%',
        zIndex: '1000', // TODO z-index abuse
        transform: `rotate(${ angle }deg)`,
        // positioned in the center of the scene
        width: `${ width }px`,
        height: `${ height }px`,
        marginLeft: `-${ (width * 0.5) + offsetX }px`,
        marginTop: `-${ (height * 0.5) + offsetY }px`
    };

    const bulbFill = lit ? primaryColor : BL_PALLETE.stars;

    // dynamic engine fire colors
    const fireFill = lit ? primaryColor : 'rgba(0, 0, 0, 0)';
    // highlight still works no matter what primary color is
    const fireFillHighlight = lit ? 'rgba(255, 255, 255, 0.25)' : 'rgba(0, 0, 0, 0)';
    // poke fire in and out from the lander body
    const fireY = range(100, 140, curve(accel));
    // magic numbers to wiggle the fire in response to lander angle
    const fireX = 99 + curve(90 - (angle / 90), 12) + curve(angle * 0.75, 2);
    const fireScale = range(0.75, 1, curve(accel));

    return (
      <div className='lander' style={style}>
        <svg width="100%" height="100%" viewBox="0 0 220 220" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink">
          <g stroke="none" fill={ BL_PALLETE.stars }>
            <g id="fire" transform={ `translate(${ fireX }, ${ fireY }) scale(${ fireScale })` }>
              <path fill={ fireFill } d="M0,12.6529791 C0,12.6529791 12.3532545,0.486886227 15.0359188,0.253623188 C17.8668195,0.00747069449 29.45,9.5531401 29.45,9.5531401 C29.45,9.5531401 32.5787784,13.3559965 24.8,32.8019324 C17.0212216,52.2478683 15.0359188,70 15.0359188,70 C15.0359188,70 10.2245603,46.2345621 7.75,32.8019324 C5.27543967,19.3693026 0,12.6529791 0,12.6529791 Z"></path>
              <path fill={ fireFillHighlight } d="M4.65,14.7229359 C4.65,14.7229359 12.8857793,6.61193519 14.6742821,6.45642128 C16.5616126,6.29231411 24.283992,12.6563072 24.283992,12.6563072 C24.283992,12.6563072 26.3699143,15.1916298 21.183888,28.156022 C15.9978617,41.1204142 14.6742821,52.9555657 14.6742821,52.9555657 C14.6742821,52.9555657 11.4666022,37.1114089 9.81684,28.156022 C8.16707777,19.2006351 4.65,14.7229359 4.65,14.7229359 Z"></path>
            </g>
            <path id="body" d="M107.313932,59.4771097 C96.5655915,59.5851547 87.6125216,60.7580381 79.1463273,63.4328757 C75.3837633,64.6198228 72.1968581,66.3000802 69.4283064,68.641421 C67.4057228,70.3583815 66.5701404,72.4816319 66.7217504,75.2185294 C66.8052113,76.6890306 66.8671537,77.8706279 67.0018781,80.5136784 C67.0335048,81.1341453 67.0476182,81.4106081 67.0652665,81.7547348 C67.3062869,86.4544192 67.4742108,89.2716874 67.7117276,92.266153 C67.8938655,94.6720049 67.076918,96.1846055 64.9219454,97.5491999 C58.1493806,101.829165 51.6810708,105.968384 41.4033069,112.581885 C40.164962,113.378731 35.7642264,116.211331 35.886466,116.132657 C35.1146901,116.629378 34.4358127,117.06625 33.7868764,117.483774 C31.0361642,119.255817 29.1964428,121.47084 28.1799681,124.392089 C27.4211445,126.598998 26.7598181,128.349211 25.230223,132.277933 C24.1346847,135.091792 23.6540762,136.345108 23.0773687,137.920894 C22.4364699,139.71138 21.3730517,140.849776 19.6839041,141.538874 C17.5124773,142.420327 15.5675436,143.898343 13.7364244,145.928372 C12.8811311,146.908632 12.2881095,148.107996 12.3285876,149.090578 C12.4458672,153.072948 14.6236403,156.689418 18.1738624,157.944819 C23.3236153,159.783251 28.5247154,159.042173 33.7284052,156.065871 C35.0541125,155.317537 36.1456841,154.233566 37.6609166,152.358146 C37.8269945,152.152589 37.8462511,152.128481 38.2765438,151.588633 C38.7049723,151.05581 38.8998731,150.363511 39.0281747,149.28971 C39.0482779,149.121459 39.0541002,149.06649 39.1199191,148.432987 C39.1750396,148.017436 39.1517864,147.575273 39.0657906,147.014224 C39.0417676,146.857495 39.0180203,146.72019 38.9027673,146.073865 C38.6981762,144.859748 39.0792845,144.014463 40.1311819,143.357397 C41.0506984,142.783432 41.8590408,142.262822 43.3559169,141.287191 C43.673134,141.080404 43.673134,141.080404 43.9900597,140.873886 C44.9377425,140.256566 45.5695797,139.848408 46.2153592,139.438605 C47.2359228,138.785664 48.2982501,138.105561 49.5772006,137.28644 C50.2331589,136.866323 53.2214153,134.952102 54.0348275,134.431164 C59.7381519,130.778552 63.457153,128.404157 67.2879792,125.974819 C68.8918276,124.964615 69.2342117,125.137093 69.4077322,127.025855 C69.4432795,127.410095 69.4673523,127.727035 69.5160749,128.419638 C69.5465059,128.852221 69.5595028,129.032363 69.5778062,129.267662 C69.6568159,130.283367 69.7448951,131.039783 69.8846818,131.778276 C70.1565293,133.335207 69.8813697,134.69517 69.0326276,136.193557 C62.7204293,147.470339 59.9405004,152.49378 56.5597227,158.819007 C55.6335372,160.529006 54.9509106,162.593731 54.5125667,164.843431 C53.1851101,171.801863 51.9056985,179.071038 50.6156338,186.920474 C50.3195545,188.716805 49.5079706,189.72044 47.8710415,190.271915 C44.64113,191.357753 41.8161917,193.411189 39.1319472,196.407535 C37.2043406,198.542082 36.3165262,200.806358 36.6822418,203.291514 C37.5792845,209.628117 40.8973939,213.900814 46.7672187,215.969441 C49.0112991,216.768638 51.3238461,216.942913 54.4556299,216.723988 C60.7667724,216.258814 65.9023994,213.674983 69.6580809,208.926862 C70.6735069,207.622409 71.3872138,206.10978 71.5321719,204.748244 C72.0520719,199.530479 70.9917675,195.871782 67.4725688,193.247503 C67.3890065,193.184565 67.3084605,193.112797 66.8831122,192.711662 C65.2777225,191.263536 65.2241977,190.965495 66.2087418,189.003516 C66.655775,188.123378 67.1208122,187.205058 67.6834101,186.091998 C67.9980712,185.469463 69.06747,183.352096 69.1516511,183.185476 C70.0830696,181.341923 70.7422235,180.040735 71.4022258,178.744705 C71.8491887,177.870029 72.3166548,176.954123 72.8471277,175.913875 C73.3210693,174.984484 73.8053697,174.034212 74.7629564,172.155109 C77.3563213,167.066627 78.8392838,164.167647 80.4657255,161.017128 C82.4829307,157.122888 84.6249239,153.071098 86.9342082,148.773712 C87.763077,147.200614 88.2914808,146.958059 90.0668514,147.299361 C91.627859,147.628899 92.3158235,147.786074 93.1575239,148.023093 C99.029157,149.633113 105.3132,150.287798 112.543156,150.206901 C118.852525,150.147817 125.020665,149.300566 131.046333,147.651606 C133.753878,146.902205 134.231657,147.12847 135.527251,149.732509 C140.77697,160.200978 144.972771,168.586072 154.410685,187.460958 C155.618245,189.879649 155.755845,190.337932 155.419099,190.905604 C155.164775,191.334333 154.639956,191.780294 153.208001,192.812559 C149.765309,195.296905 148.325277,198.689538 148.488622,203.210595 C148.53968,205.25003 149.205903,207.08613 150.486668,208.738329 C154.452103,213.81867 159.879129,216.307176 166.588283,216.337587 C173.820817,216.38808 180.1105,212.150422 182.02002,205.270574 C182.938824,201.999225 182.485208,199.174344 180.503295,196.679985 C178.157374,193.732092 175.722938,191.716145 172.794303,190.514719 C171.326631,189.913908 170.565434,188.871197 170.305189,187.148064 C169.14583,179.502023 167.911543,171.858159 166.602283,164.216186 C166.331344,162.60832 165.783538,160.981569 165.021856,159.51194 C161.099675,151.989067 157.191781,144.683973 153.277916,137.567676 C151.885295,135.030722 151.437498,133.156268 151.953445,131.063479 C152.070132,130.585886 152.115658,130.128858 152.151473,129.171452 C152.163379,128.827495 152.169849,128.674784 152.182059,128.488976 C152.402071,125.617398 152.573318,125.531861 154.937038,127.124993 C157.189911,128.633499 158.988953,129.843131 163.035141,132.567453 C171.129619,138.017511 174.73394,140.430932 179.264191,143.414224 C181.058779,144.600237 181.616514,145.709106 181.21489,147.568823 C180.68178,150.007099 181.291267,152.225733 183.022942,154.152967 C187.320949,158.938031 192.829675,160.464966 199.663665,159.207149 C201.856051,158.804473 203.690047,157.538004 204.987384,155.615198 C207.568872,151.793423 207.270012,148.917181 204.31652,146.207986 C202.212875,144.266118 200.860872,143.238063 199.138303,142.446536 C197.929749,141.908 197.154523,140.967934 196.643373,139.512186 C196.239413,138.352499 195.865163,137.315586 195.055804,135.103382 C193.553253,130.997213 192.900486,129.131112 192.191425,126.791021 C191.073141,123.127911 188.82162,120.326324 185.322969,117.938664 C181.317094,115.226201 178.115878,113.048331 170.915127,108.141773 C163.713624,103.234702 160.511944,101.056517 156.506435,98.3443049 C154.857111,97.223486 154.173994,95.9162364 154.317777,94.0194684 C154.595352,90.3642957 154.792877,87.4772963 155.229863,80.8507507 C155.358323,78.9027455 155.419263,77.982092 155.49349,76.8725907 C155.686411,73.9082771 155.230892,72.0919668 153.454237,70.722596 C153.281818,70.5900252 153.081819,70.4359285 152.708656,70.1483783 C150.060481,68.1089459 148.646335,67.1075634 146.918781,66.1490865 C146.264268,65.7883731 145.557726,65.4569274 144.766952,65.1315082 C143.81408,64.7393817 140.724011,63.6408046 140.468183,63.546214 C138.444661,63.0225019 137.781628,62.8507686 136.747407,62.5821685 C129.964056,60.8827807 122.86064,59.9096968 115.342934,59.5920094 L113.278968,32.1540852 C113.260358,31.9066949 113.425964,31.683072 113.668027,31.6287245 C120.097077,30.1852863 124.700201,24.3961578 124.583754,17.7249072 C124.448812,9.99409832 118.072361,3.83643139 110.341552,3.97137317 C102.610743,4.10631494 96.4530765,10.4827657 96.5880183,18.2135746 C96.7047781,24.9027413 101.532273,30.5380442 108.030295,31.7369047 C108.275132,31.7820761 108.449432,32.0004954 108.439152,32.2492516 L107.313932,59.4771097 Z M185.980057,140.933971 C185.853383,140.961998 185.720773,140.93969 185.610241,140.871759 C185.570961,140.847618 184.041527,139.924848 183.668059,139.683696 C183.439843,139.536334 183.23514,139.397182 183.05251,139.264638 C181.429439,138.153783 180.131191,137.264384 177.210489,135.26284 C168.449268,129.25881 164.553478,126.596754 159.676767,123.293318 C157.843109,122.04939 157.064658,120.480421 157.262298,118.344881 C157.378684,117.063564 157.453536,116.050121 157.611591,113.733953 C157.697598,112.473606 157.73797,111.89714 157.791368,111.188144 C157.811216,110.924619 157.830897,110.670924 157.851039,110.419823 C158.065434,107.990469 159.166085,107.444245 161.170271,108.793814 C171.274332,115.638637 171.274332,115.638637 181.381975,122.48591 C182.7484,123.428986 183.702731,124.671975 184.26542,126.22894 C184.592438,127.130513 184.932737,128.060573 185.370745,129.251708 C185.513943,129.641125 185.635288,129.970756 185.900159,130.690037 C187.160538,134.11287 187.752406,135.737036 188.446077,137.69925 C188.770281,138.616339 188.794007,139.788606 188.289243,140.275119 C187.945379,140.604311 187.509338,140.742471 186.848928,140.824025 C186.751782,140.836022 186.711293,140.840375 186.497518,140.862578 C186.228778,140.890491 186.098927,140.907671 185.980057,140.933971 Z M33.2154819,131.843762 C33.4000057,131.384367 33.5717285,130.959391 33.8512998,130.269073 C33.9691571,129.978088 33.9691571,129.978088 34.0869373,129.687248 C34.9770154,127.48895 35.4664793,126.25778 35.9908349,124.875903 C36.5886621,123.350326 37.5896652,122.137349 38.9889865,121.229684 C42.9954649,118.670003 42.9954649,118.670003 47.0019433,116.110321 C53.6241126,111.879513 53.6241126,111.879513 60.2578607,107.641528 C60.682911,107.386003 60.8779553,107.275619 61.1359316,107.155415 C62.4643153,106.521512 63.2766388,106.921165 63.6359065,108.3936 C63.6416343,108.42759 63.6470747,108.454468 63.6632959,108.530621 C63.7039525,108.721003 63.7188403,108.809353 63.7211997,108.916576 C63.7688759,109.694964 63.8058542,110.283211 63.8980056,111.73744 C64.1021349,114.958776 64.1917531,116.444175 64.285433,118.264573 C64.3762867,119.922676 63.6550831,121.239132 62.2031668,122.184888 C60.4698519,123.310091 58.6565748,124.489537 56.5850601,125.838828 C55.6112187,126.473144 54.5958328,127.13487 53.3697916,127.934149 C52.6614495,128.39593 50.2062428,129.996751 50.1539013,130.030876 C43.928758,134.089531 40.3705524,136.403923 36.4892687,138.913715 C35.6147301,139.485876 34.6662381,139.907189 33.7539493,140.10434 C31.4835107,140.628718 30.3814879,139.340846 31.1713587,137.150151 C31.4665238,136.333091 31.7424064,135.616442 32.2656963,134.288985 C32.3087223,134.179851 32.3087223,134.179851 32.35174,134.070758 C32.7788235,132.987641 32.9808336,132.468818 33.2154819,131.843762 Z M61.4404532,165.330665 C61.5606484,165.104305 61.6845043,164.870592 61.8144876,164.624905 C62.138005,164.013412 63.4141464,161.591764 63.7299185,160.994887 C64.053508,160.383234 64.3417131,159.840921 64.6173362,159.325513 C64.8418176,158.903742 65.0757017,158.463336 65.3552475,157.936203 C65.5143281,157.636227 65.6694593,157.343527 65.983561,156.750816 C68.0788459,152.797353 69.1345938,150.836005 70.4100044,148.564802 C71.8070181,146.073918 73.1121483,143.847632 75.5163619,139.815523 C75.5319461,139.789387 76.2698476,138.55215 76.4818564,138.196437 C76.4757144,138.206793 76.6351611,137.9339 76.6862328,137.850219 C77.2389504,136.944591 77.8439777,136.540955 78.7078093,137.00208 C79.3812634,137.364848 79.5547414,137.965859 79.3182803,138.623848 C79.2429803,138.833382 79.1368815,139.032576 78.9799873,139.283298 C78.9426094,139.343029 78.8994433,139.410317 78.8260101,139.524596 C78.0524531,140.718258 77.8875601,141.834068 77.9228535,144.215275 C77.9303117,144.703604 77.9322403,144.85294 77.9332714,145.037134 C77.9408886,145.660194 77.9670663,146.164291 78.0405108,147.289007 C78.134015,148.720912 78.1623889,149.353611 78.1487291,150.156751 C78.1248931,151.297063 77.9054005,152.357763 77.4672016,153.19293 C76.4650901,155.126419 75.549603,156.844242 73.8476357,160.00395 C73.6914163,160.293954 73.6914163,160.293954 73.5351935,160.583938 C71.4646229,164.427452 70.493199,166.252597 69.3548165,168.467915 C67.2472668,172.567523 65.4484782,176.191364 62.0605572,183.109078 C61.4729382,184.309076 61.1622817,184.943453 60.8853224,185.508729 C60.7421503,185.802631 60.6619387,186.081054 60.5129517,186.732351 C60.4351767,187.071867 60.3962232,187.231987 60.3483408,187.403836 C60.3130452,187.53466 60.3130452,187.53466 60.2896281,187.62053 C60.0300344,188.561174 59.6331484,189.039485 58.7358599,188.893593 C57.7468268,188.735946 57.4671535,187.954407 57.6229248,186.928713 C58.204264,183.339341 58.5181727,181.468885 58.9089507,179.340403 C59.1107024,178.218488 59.321983,177.058417 59.5473239,175.834135 C59.9436411,173.680935 60.3200192,171.66801 60.9571875,168.282541 C61.0949244,167.550798 61.0949244,167.550798 61.231792,166.823826 C61.2766069,166.573685 61.3194382,166.379299 61.4204795,165.948031 C61.3653717,165.672603 61.3567698,165.488264 61.4404532,165.330665 Z M164.511904,189.315646 C164.504253,189.46344 164.431523,189.60025 164.313289,189.689257 C164.283748,189.711496 164.248893,189.742465 164.129896,189.849761 C163.867038,190.081993 163.661088,190.207401 163.353739,190.232864 C163.047284,190.247069 162.874088,190.157616 162.500546,189.895917 C162.40287,189.827486 162.361567,189.799761 162.31125,189.770372 C162.131247,189.662063 162.073291,189.552836 162.002266,189.34599 C160.702682,185.156386 159.251772,182.01238 155.705579,175.148305 C155.651537,175.043701 155.651537,175.043701 155.597491,174.939087 C154.311854,172.450429 153.680396,171.206931 152.968731,169.735803 C151.904271,167.520014 150.990138,165.714053 148.997072,161.8452 C148.859038,161.57726 148.859038,161.57726 148.721009,161.309292 C147.974802,159.8605 147.516951,158.967582 147.043632,158.034713 C146.979372,157.908087 146.959713,157.866864 146.924195,157.791685 C146.854616,157.645239 146.817139,157.579244 146.775091,157.530063 C145.328079,155.831957 145.019919,153.972595 145.309691,151.019845 C145.393603,150.107407 145.42186,149.371009 145.456009,147.708168 C145.475207,146.773345 145.486001,146.35798 145.507902,145.841831 C145.54016,144.782949 145.302794,143.822968 144.775758,142.878753 C144.751547,142.835297 144.65261,142.662449 144.632022,142.625879 C144.516387,142.420479 144.437878,142.263372 144.375558,142.098533 C144.127038,141.441192 144.25987,140.846058 144.918981,140.483989 C145.747447,140.043486 146.335067,140.436546 146.860347,141.300258 C146.910118,141.382097 146.959443,141.467092 147.043275,141.612618 C148.222906,143.634169 149.218965,145.397236 150.148157,147.121224 C150.951954,148.61225 151.698852,150.007148 152.955375,152.360506 C153.160341,152.744408 153.160341,152.744408 153.36528,153.128278 C156.099587,158.249841 157.405422,160.675161 159.002901,163.571614 C160.45425,166.195646 161.383603,168.86464 161.818457,171.718034 C162.136111,173.754354 162.457283,175.538827 163.098029,178.927246 C163.135835,179.127138 163.135835,179.127138 163.173657,179.327063 C163.656871,181.881267 163.870522,183.034133 164.119448,184.465709 C164.236168,185.113367 164.313476,185.76634 164.391441,186.667533 C164.406715,186.84408 164.418122,186.981894 164.444308,187.303017 C164.490555,187.870132 164.512507,188.126009 164.544593,188.45403 C164.553909,188.697807 164.553756,188.700522 164.524706,189.110632 C164.519295,189.187017 164.515281,189.250426 164.511904,189.315646 Z"></path>
            <circle id="bulb" fill={ bulbFill } cx="110.5" cy="18.5" r="9.5"></circle>
          </g>
        </svg>
      </div>
    );
};

// StarField parallax background image -----------------------------------------

const StarField = ({
    children,
    depthFactor, // 0..1
    posX,
    posY
}) => {
    // Depth factor is used to set amount of motion, dynamic color,
    // and relative size of graphics.
    const dpt = bound(depthFactor, 0, 1);
    const bgX = -(posX * dpt);
    const bgY = -(posY * dpt);
    const prc = (0 + (50 * dpt));
    const style = {
        position: 'absolute',
        top: '0',
        left: '0',
        right: '0',
        bottom: '0',
        zIndex: `${ Math.round(dpt * 100) }`,
        backgroundImage: `url('data:image/svg+xml;base64,${ genStarBg(dpt) }')`,
        backgroundSize: `${ prc }%`,
        backgroundPosition: `${ bgX }px ${ bgY }px`
    };
    return (
      <div className='star-field' style={style}>{ children }</div>
    );
};


// Helpers ---------------------------------------------------------------------

// Generate an SVG document string with star dynamic color.
// These start polygons are perfectly placed to provide a hexagonal tiling.
function genStarBg(depthFactor) {
    const color = colorInterpolate(BL_PALLETE.space, BL_PALLETE.stars, depthFactor);
    // base64 encode for data-uri
    return (btoa(`<?xml version="1.0" encoding="UTF-8"?>
      <svg width="174px" height="300px" viewBox="0 0 174 300" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <g stroke="none" fill="none">
          <g transform="translate(30.000000, 100.000000)">
            <polygon fill="${ color }" points="100 104.349127 93.2016261 107.923243 94.5 100.353143 89 94.9919678 96.6008131 93.887505 100 87 103.399187 93.887505 111 94.9919678 105.5 100.353143 106.798374 107.923243"></polygon>
          </g>
          <g transform="translate(-57.000000, -50.000000)">
            <polygon fill="${ color }" points="100 104.349127 93.2016261 107.923243 94.5 100.353143 89 94.9919678 96.6008131 93.887505 100 87 103.399187 93.887505 111 94.9919678 105.5 100.353143 106.798374 107.923243"></polygon>
          </g>
        </g>
      </svg>
    `));
}

// Prevent a number from over/underflowing.
function bound(n, min, max) {
    return Math.max(Math.min(max, n), min);
}

// Interpolate between min and max range with a 0..1 factor.
function range(min, max, factor) {
    return min + ((max - min) * bound(factor, 0, 1));
}

// convert 0..1 factor into a nice sine curve, with optional amplification.
function curve(factor, amp) {
    return Math.sin((Math.PI / 2) * factor) * (amp || 1);
}

// Calculate next tick for a slew limiter function.
// This is used to create a time delay / lag.
function slew(current, target, amount) {
    if (current > target) {
        return Math.max(current - amount, target);
    }
    if (current < target) {
        return Math.min(current + amount, target);
    }
    return target;
}

// Given two hex colors, interpolate between them based on 0..1 factor
function colorInterpolate(color1, color2, factor) {
    const fa = bound(factor, 0, 1);
    const c1 = hexColorToRgb(color1);
    const c2 = hexColorToRgb(color2);
    const r = Math.round(c1.r + ((c2.r - c1.r) * fa));
    const g = Math.round(c1.g + ((c2.g - c1.g) * fa));
    const b = Math.round(c1.b + ((c2.b - c1.b) * fa));
    return rgbToHex(r, g, b);
}

function hexColorToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

function rgbToHex(r, g, b) {
    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

// Export ----------------------------------------------------------------------

export default Lamp;
